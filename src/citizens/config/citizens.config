import com.obs.config.*
import static com.obs.olm.Configuration.*
import static com.obs.config.RealtimeReportingConfiguration.*
import com.obs.datamodel.account.AccountTypePermission
import com.obs.datamodel.account.LoanTypePermission
import com.obs.datamodel.service.StatementSettings
import com.obs.channels.fiserv.director.DirectorRetrievalUrlBuilder
import com.obs.services.mapper.generator.wires.BasicFedwireMAXGenerator
import com.obs.services.payments.fundtech.ws.FundTechHif33TransferHandler
import com.obs.config.FiservPremierConfiguration
import com.fundtech.hif5.hif33v5.MopType

////////////////////////////////////////////////////////////////////////////////
// Properties
////////////////////////////////////////////////////////////////////////////////

bank {
    bankId = 'citizens'
    primaryAba = '122234149'
    timezone = 'US/Pacific'
    layout = 'fresh'
    smsSupportEmailAddress= 'citizens@olbanking.com'
    enableResourceCenter = true
}

//Secure browser
mSecureBrowser {
    productName='Citizens Business Bank Secure Browser'
}

//Desktopclient




//Token client





//Small business
smallBusiness {
}

/////////////////////////////////////////////////////////////////////////////////
// Processing  Centers
////////////////////////////////////////////////////////////////////////////////

processingCenters {
    CITIZENS {
        immediateOriginName = 'CITIZENS'
        deliveryPoints {
            'CITIZENS' (aba: bank.primaryAba)
        }
    }
}

accountTypes {

    DDA {
        isDefault = true
        systemClass = 'DDA'
        systemId = 'ALL'
        canAccountTransfer = AccountTypePermission.Both
        achDebitTransactionCode = 27
        achCreditTransactionCode = 22
        overviewTypeCode = '914'
        showRollingBalance = true
        runningBalanceTypeCode = '015'
        thumbnailTypeCodes = ['60', '30', '914']
        historicalTypeCodes = ['015', '040', '045', '050', '055', '072','074','100','400']
        allTypeCodes = ['60', '30', '914']
        intuitAccountType = 'CHECKING'
    }
    SAV {
        systemClass = 'Savings'
        systemId = 'ALL'
        achDebitTransactionCode = 37
        achCreditTransactionCode = 32
        canAccountTransfer = AccountTypePermission.Both
        overviewTypeCode = '914'
        showRollingBalance = true
        runningBalanceTypeCode = '015'
        thumbnailTypeCodes = ['60', '30', '914']
        historicalTypeCodes = ['015', '040', '045', '050', '055', '072','074','100','400']
        allTypeCodes = ['60', '30', '914']
        intuitAccountType = 'SAVINGS'
    }
    LOAN {
        systemClass = 'Loan'
        systemId = 'ALL'
        canAccountTransfer = AccountTypePermission.Both
        allowedLoanTransferTypes = LoanTypePermission.Both
        overviewTypeCode = '911'
        showRollingBalance = true
        thumbnailTypeCodes = ['911', '916', '908']
        historicalTypeCodes = ['015', '072','074','100','400']
        allTypeCodes = ['911', '916', '908', '909', '907']
        intuitAccountType = 'CREDITLINE'
    }
    CD {
        systemClass = 'CD'
        systemId = 'ALL'
        canAccountTransfer = AccountTypePermission.NotApplicable
        overviewTypeCode = '921'
        showRollingBalance = false
        thumbnailTypeCodes = ['921', '922', '919']
        historicalTypeCodes = ['015', '072','074','100','400']
        allTypeCodes = ['921', '922', '919', '920', '912']
        intuitAccountType = 'SAVINGS'
    }

}

// Information Reporting
realtimeReporting {
    enableBalanceAlerts = true
    enableBaiReport = true
    enableCsvTransactionReport = true
    enableCsvBalanceTransactionReport = true
    balanceAlertTriggers {
        SevenAm (type: ScheduledTaskTrigger.Type.DAILY, hour: 7)
        ElevenAm (type: ScheduledTaskTrigger.Type.DAILY, hour: 11 )
        ThreePm (type: ScheduledTaskTrigger.Type.DAILY, hour: 15 )
    }
    source = RealtimeReportingConfiguration.Source.Premier
}

//Payments
payments {
    achPayment {
        enableSameDay=false
        sameDayDeadline = '13:00 US/Pacific'
        sameDayApprovalReminderTime = '10:00 US/Pacific'
        approvalReminderTime='16:00'
        batchTriggers {
            EightAm (type: ScheduledTaskTrigger.Type.DAILY, hour: 8, minute: 0)
            TenAm (type: ScheduledTaskTrigger.Type.DAILY, hour: 10, minute: 0)
            OnePm (type: ScheduledTaskTrigger.Type.DAILY, hour: 13, minute: 0)
            ThreePm (type: ScheduledTaskTrigger.Type.DAILY, hour: 15, minute: 0)
            FivePm (type: ScheduledTaskTrigger.Type.DAILY, hour: 17, minute: 0)
            SevenPm (type: ScheduledTaskTrigger.Type.DAILY, hour: 19, minute: 0)
        }
        batchParameters = [
                'FileName': 'citizensCBSACH%mm%%dd%%yy%%hh%%MM%%ss%.txt',
                'ImmediateDestination': '122234149',
                'ImmediateOrigin': '122234149',
                'ImmediateDestinationName': 'citizens',
                'ImmediateOriginName': 'Citizens Business Bank',
                'TransactionIdGeneratorModuleName': 'ACHAggregatingBatcher',
                'TransactionIdGeneratorTimezone': 'US/Pacific'
        ]
    }
    wireTransfer {
        startOfDay='5:00'
        endOfDay = '14:55'
        approvalReminderTime = '15:00'
        enableUsdInternational = true
        enableFxInternational = true
        enableInbox = true
        deliveryMapper = BasicFedwireMAXGenerator.class
        deliveryHandler = FundTechHif33TransferHandler.class
        usdInternationalDeliveryHandler = FundTechHif33TransferHandler.class
        fxInternationalDeliveryHandler = FundTechHif33TransferHandler.class
        validateAccountBalanceTypeCode = '914'
        USDServiceTagValue = "CCD"
        USDIServiceTagValue = "CCI"
        FXServiceTagValue = "CCX"
        USDIMopTagValue =  MopType.FED
        validateAccountBalanceOnEntry = true
    }
    accountTransfer {
        startOfDay='6:00'
        approvalReminderTime='18:00'
        endOfDay='20:00'
    }
}
fundTechWires {
    productionServer = true
    hostName = '216.131.11.98' //Need Tunnel Info
    hostPort = '11540' //Need Tunnel Info
    queueMgrName = 'EWBOBSTEST'
    channel = 'OBS_CHANNEL'
    paymentQueueName = 'PAYPLUS.OBS.WIRES.TEST.PYMT'
    paymentAckName = 'PAYPLUS.OBS.WIRES.TEST.PYMT.ACK'
    confQueueName = 'PAYPLUS.OBS.WIRES.TEST.CONF'
    proxyId = 'TMQPAYPLUS50'
    sendConfirmationAcknowledgements = false
    sslCipherSuite = null
}
nachaReporting {}
nachaReturnsReporting {}

////////////////////////////////////////////////////////////////////////////////
// Company Identifiers
////////////////////////////////////////////////////////////////////////////////
addCompanyIdentifier('TAXID')

addUserDetail('favoriteHobby')
addUserDetail('mothersMiddleName')

//Analytics
analyticsConfig {
    enableDetection=true
}

//Check positive pay TODO

////////////////////////////////////////////////////////////////////////////////
// Director Setup for Check Images, Statements, Deposit Images
////////////////////////////////////////////////////////////////////////////////
statements {
    services = []

    statementReportingClass = com.obs.channels.fiserv.director.DirectorStatementReporting
    statementReportingFacadeTier = 'directorretrieval'

    searchThreshold = 1
    statementSettings =  new StatementSettings(searchIntervalDays: [31, 93, 183, 366, 456, 549])
    allowGroupingByDate = false
    menuAnchor = 'TRANSACTIONSEARCH'

    service('DDA_ACCOUNTSTATEMENT') {
        systemArguments = ["directorRetrievalDocCode" : "101"]
    }
    service('SAV_ACCOUNTSTATEMENT') {
        systemArguments = ["directorRetrievalDocCode" : "4526"]
    }
    service('CHECKING_ACCOUNTSTATEMENT') {
        systemArguments = ["directorRetrievalDocCode" : "1758"]
    }

}


////////////////////////////////////////////////////////////////////////////////
// Questions
////////////////////////////////////////////////////////////////////////////////
config.add(QUESTION, 'Q1', ['Q1A', 'Q1B', 'Q1C', 'Q1D', 'Q1E', 'Q1F'] )
config.add(QUESTION, 'Q2', ['Q2A', 'Q2B', 'Q2C', 'Q2D', 'Q2E', 'Q2F'] )
config.add(QUESTION, 'Q3', ['Q3A', 'Q3B', 'Q3C', 'Q3D', 'Q3E', 'Q3F'] )

////////////////////////////////////////////////////////////////////////////////
// API Setup
////////////////////////////////////////////////////////////////////////////////

api {}

baiReporting {
    enableHybridReporting = true
}

//ABA to office code map. Used by Fundtech wire web service.
//TODO: Still need actual values here.
config.set('FundTechBankOfficeMap',  [
    '122234149': [ 'officeCode': '001', 'officeName': 'ME' ]])
